{"$message_type":"diagnostic","message":"the trait bound `&str: IntoResettable<char>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":292,"byte_end":295,"line_start":10,"line_end":10,"column_start":48,"column_end":51,"is_primary":true,"text":[{"text":"        .arg(Arg::new(\"input file path\").short(\"i\").long(\"in\").value_parser(value_parser!(str)))","highlight_start":48,"highlight_end":51}],"label":"the trait `IntoResettable<char>` is not implemented for `&str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":286,"byte_end":291,"line_start":10,"line_end":10,"column_start":42,"column_end":47,"is_primary":false,"text":[{"text":"        .arg(Arg::new(\"input file path\").short(\"i\").long(\"in\").value_parser(value_parser!(str)))","highlight_start":42,"highlight_end":47}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `IntoResettable<T>`:\n  <char as IntoResettable<char>>\n  <usize as IntoResettable<usize>>\n  <ArgAction as IntoResettable<ArgAction>>\n  <Resettable<T> as IntoResettable<T>>\n  <ValueHint as IntoResettable<ValueHint>>\n  <Option<char> as IntoResettable<char>>\n  <Option<usize> as IntoResettable<usize>>\n  <Option<ValueParser> as IntoResettable<ValueParser>>\nand 5 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Arg::short`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\Jiale Zhang\\.cargo\\registry\\src\\mirrors.tuna.tsinghua.edu.cn-2eab394af869c8a2\\clap_builder-4.5.27\\src\\builder\\arg.rs","byte_start":6406,"byte_end":6426,"line_start":182,"line_end":182,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    pub fn short(mut self, s: impl IntoResettable<char>) -> Self {","highlight_start":36,"highlight_end":56}],"label":"required by this bound in `Arg::short`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `&str: IntoResettable<char>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:10:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .arg(Arg::new(\"input file path\").short(\"i\").long(\"in\").value_parser(value_parser!(str)))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `IntoResettable<char>` is not implemented for `&str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `IntoResettable<T>`:\u001b[0m\n\u001b[0m              <char as IntoResettable<char>>\u001b[0m\n\u001b[0m              <usize as IntoResettable<usize>>\u001b[0m\n\u001b[0m              <ArgAction as IntoResettable<ArgAction>>\u001b[0m\n\u001b[0m              <Resettable<T> as IntoResettable<T>>\u001b[0m\n\u001b[0m              <ValueHint as IntoResettable<ValueHint>>\u001b[0m\n\u001b[0m              <Option<char> as IntoResettable<char>>\u001b[0m\n\u001b[0m              <Option<usize> as IntoResettable<usize>>\u001b[0m\n\u001b[0m              <Option<ValueParser> as IntoResettable<ValueParser>>\u001b[0m\n\u001b[0m            and 5 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Arg::short`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Jiale Zhang\\.cargo\\registry\\src\\mirrors.tuna.tsinghua.edu.cn-2eab394af869c8a2\\clap_builder-4.5.27\\src\\builder\\arg.rs:182:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m182\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn short(mut self, s: impl IntoResettable<char>) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Arg::short`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the function or associated item `new` exists for struct `_infer_ValueParser_for<str>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\Jiale Zhang\\.cargo\\registry\\src\\mirrors.tuna.tsinghua.edu.cn-2eab394af869c8a2\\clap_builder-4.5.27\\src\\builder\\value_parser.rs","byte_start":81377,"byte_end":81380,"line_start":2617,"line_end":2617,"column_start":70,"column_end":73,"is_primary":true,"text":[{"text":"        let auto = $crate::builder::_infer_ValueParser_for::<$name>::new();","highlight_start":70,"highlight_end":73}],"label":"function or associated item cannot be called on `_infer_ValueParser_for<str>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\main.rs","byte_start":321,"byte_end":339,"line_start":10,"line_end":10,"column_start":77,"column_end":95,"is_primary":false,"text":[{"text":"        .arg(Arg::new(\"input file path\").short(\"i\").long(\"in\").value_parser(value_parser!(str)))","highlight_start":77,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"value_parser!","def_site_span":{"file_name":"C:\\Users\\Jiale Zhang\\.cargo\\registry\\src\\mirrors.tuna.tsinghua.edu.cn-2eab394af869c8a2\\clap_builder-4.5.27\\src\\builder\\value_parser.rs","byte_start":81213,"byte_end":81238,"line_start":2614,"line_end":2614,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! value_parser {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following trait bounds were not satisfied:\n`str: Sized`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the function or associated item `new` exists for struct `_infer_ValueParser_for<str>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:10:77\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .arg(Arg::new(\"input file path\").short(\"i\").long(\"in\").value_parser(value_parser!(str)))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item cannot be called on `_infer_ValueParser_for<str>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `str: Sized`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `value_parser` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\Jiale Zhang\\.cargo\\registry\\src\\mirrors.tuna.tsinghua.edu.cn-2eab394af869c8a2\\clap_builder-4.5.27\\src\\builder\\value_parser.rs","byte_start":81327,"byte_end":81375,"line_start":2617,"line_end":2617,"column_start":20,"column_end":68,"is_primary":true,"text":[{"text":"        let auto = $crate::builder::_infer_ValueParser_for::<$name>::new();","highlight_start":20,"highlight_end":68}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\main.rs","byte_start":321,"byte_end":339,"line_start":10,"line_end":10,"column_start":77,"column_end":95,"is_primary":false,"text":[{"text":"        .arg(Arg::new(\"input file path\").short(\"i\").long(\"in\").value_parser(value_parser!(str)))","highlight_start":77,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"value_parser!","def_site_span":{"file_name":"C:\\Users\\Jiale Zhang\\.cargo\\registry\\src\\mirrors.tuna.tsinghua.edu.cn-2eab394af869c8a2\\clap_builder-4.5.27\\src\\builder\\value_parser.rs","byte_start":81213,"byte_end":81238,"line_start":2614,"line_end":2614,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! value_parser {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `_infer_ValueParser_for`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\Jiale Zhang\\.cargo\\registry\\src\\mirrors.tuna.tsinghua.edu.cn-2eab394af869c8a2\\clap_builder-4.5.27\\src\\builder\\value_parser.rs","byte_start":74833,"byte_end":74834,"line_start":2427,"line_end":2427,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"pub struct _infer_ValueParser_for<T>(std::marker::PhantomData<T>);","highlight_start":35,"highlight_end":36}],"label":"required by this bound in `_infer_ValueParser_for`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:10:77\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .arg(Arg::new(\"input file path\").short(\"i\").long(\"in\").value_parser(value_parser!(str)))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `Sized` is not implemented for `str`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `_infer_ValueParser_for`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Jiale Zhang\\.cargo\\registry\\src\\mirrors.tuna.tsinghua.edu.cn-2eab394af869c8a2\\clap_builder-4.5.27\\src\\builder\\value_parser.rs:2427:35\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2427\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct _infer_ValueParser_for<T>(std::marker::PhantomData<T>);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `_infer_ValueParser_for`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `value_parser` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `&str: IntoResettable<char>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":382,"byte_end":385,"line_start":11,"line_end":11,"column_start":41,"column_end":44,"is_primary":true,"text":[{"text":"        .arg(Arg::new(\"standard\").short(\"s\").long(\"std\").value_parser(value_parser!(u32)))","highlight_start":41,"highlight_end":44}],"label":"the trait `IntoResettable<char>` is not implemented for `&str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":376,"byte_end":381,"line_start":11,"line_end":11,"column_start":35,"column_end":40,"is_primary":false,"text":[{"text":"        .arg(Arg::new(\"standard\").short(\"s\").long(\"std\").value_parser(value_parser!(u32)))","highlight_start":35,"highlight_end":40}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `IntoResettable<T>`:\n  <char as IntoResettable<char>>\n  <usize as IntoResettable<usize>>\n  <ArgAction as IntoResettable<ArgAction>>\n  <Resettable<T> as IntoResettable<T>>\n  <ValueHint as IntoResettable<ValueHint>>\n  <Option<char> as IntoResettable<char>>\n  <Option<usize> as IntoResettable<usize>>\n  <Option<ValueParser> as IntoResettable<ValueParser>>\nand 5 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Arg::short`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\Jiale Zhang\\.cargo\\registry\\src\\mirrors.tuna.tsinghua.edu.cn-2eab394af869c8a2\\clap_builder-4.5.27\\src\\builder\\arg.rs","byte_start":6406,"byte_end":6426,"line_start":182,"line_end":182,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    pub fn short(mut self, s: impl IntoResettable<char>) -> Self {","highlight_start":36,"highlight_end":56}],"label":"required by this bound in `Arg::short`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `&str: IntoResettable<char>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:11:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .arg(Arg::new(\"standard\").short(\"s\").long(\"std\").value_parser(value_parser!(u32)))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `IntoResettable<char>` is not implemented for `&str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `IntoResettable<T>`:\u001b[0m\n\u001b[0m              <char as IntoResettable<char>>\u001b[0m\n\u001b[0m              <usize as IntoResettable<usize>>\u001b[0m\n\u001b[0m              <ArgAction as IntoResettable<ArgAction>>\u001b[0m\n\u001b[0m              <Resettable<T> as IntoResettable<T>>\u001b[0m\n\u001b[0m              <ValueHint as IntoResettable<ValueHint>>\u001b[0m\n\u001b[0m              <Option<char> as IntoResettable<char>>\u001b[0m\n\u001b[0m              <Option<usize> as IntoResettable<usize>>\u001b[0m\n\u001b[0m              <Option<ValueParser> as IntoResettable<ValueParser>>\u001b[0m\n\u001b[0m            and 5 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Arg::short`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Jiale Zhang\\.cargo\\registry\\src\\mirrors.tuna.tsinghua.edu.cn-2eab394af869c8a2\\clap_builder-4.5.27\\src\\builder\\arg.rs:182:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m182\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn short(mut self, s: impl IntoResettable<char>) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Arg::short`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0277, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
